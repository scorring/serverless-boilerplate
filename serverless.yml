service: NotifTokenSaver

# frameworkVersion: "=X.X.X"
plugins:
  - serverless-offline
  - serverless-webpack
  - serverless-domain-manager
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs8.10
  timeout: 40
  stage: ${opt:stage, 'dev'}
  region: ${file(config/serverless.${self:provider.stage}.yml):config.region, 'eu-west-1'}
  profile: ${file(config/serverless.${self:provider.stage}.yml):config.profile, 'default'}
  # role: ${file(config/serverless.${self:provider.stage}.yml):config.role}

  deploymentBucket:
      name: seb-sls-deployments
      memorySize: 256
      serverSideEncryption: AES256
  
  vpc:
    securityGroupIds: ${file(config/serverless.${self:provider.stage}.yml):config.securityGroupIds}
    subnetIds: ${file(config/serverless.${self:provider.stage}.yml):config.subnetIds}
  stackTags:
    TYPE: ServerLess
  stackPolicy:
    - Effect: Allow
      Principal: "*"
      Action: "Update:*"
      Resource: "*"
    - Effect: Deny
      Principal: "*"
      Action:
        - Update:Replace
        - Update:Delete
      Resource: "*"
      Condition:
        StringEquals:
          ResourceType:
            - AWS::EC2::Instance
  environment: ${file(config/serverless.${self:provider.stage}.yml):config.environment}

custom:
  # Custom Domain (configured by stage)
  customDomain:
    enabled: false

  # Webpack Config
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true

  # Config for serverless-offline
  serverless-offline:
      babelOptions:
        presets: ["env"]

  # Config for serverless-dynamoDb
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
      
# AWS Resources
resources:
  - ${file(config/resources/dynamodb-notif-token-saver.yml)}

# Endpoints
functions:
  # Function to check JWT validity
  save:
    handler: src/handlers/events.save
    events:
      - http:
          path: /
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  retrieve:
    handler: src/handlers/events.retrieve
    events:
      - http:
          path: /{id}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          request:
            parameters:
              paths:
                id: true
